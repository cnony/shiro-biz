<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.vindell</groupId>
	<artifactId>shiro-biz</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	
	<description>基于Shiro的扩展实现</description>
	<url>https://github.com/vindell/shiro-biz</url>
	<packaging>jar</packaging>
	
	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:git@github.com:vindell/${project.artifactId}.git</connection>
		<developerConnection>scm:git:git@github.com:vindell/${project.artifactId}.git</developerConnection>
		<url>git@github.com:vindell/${project.artifactId}.git</url>
	</scm>
	
	<developers>
        <developer>
        	<id>001</id>
            <name>vindell</name>
            <email>hnxyhcwdl1003@163.com</email>
        </developer>
    </developers> 
	
	<build>
		<pluginManagement>
			<plugins>
				<!-- 编译插件：编译主代码至主输出目录 -->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.6.1</version> 
					<!-- 设置源文件编码方式 -->  
					<configuration>
						<defaultLibBundleDir>lib</defaultLibBundleDir>
						<!-- 源代码编译版本 -->
						<source>1.7</source>
						<!-- 目标平台编译版本 -->
						<target>1.7</target>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!--  -->
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- 资源插件：复制主资源文件至主输出目录 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<!-- 解决资源文件的编码问题 -->  
					<configuration>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
					<!-- 复制测试资源文件至测试输出目录复制resources到classess -->
					<executions>
						<execution>
							<id>copy-resources</id>
							<phase>validate</phase>
							<goals>
								<goal>copy-resources</goal>
							</goals>
							<configuration>
								<outputDirectory>${basedir}/target/classes</outputDirectory>
								<resources>
									<resource>
										<directory>src/main/resources</directory>
										<!-- <filtering>true</filtering> -->
									</resource>
								</resources>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>3.0.4</version>
					<executions>
						<execution>
							<phase>verify</phase>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- 单元测试插件 ：执行测试用例-->  
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19.1</version>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!--
							forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。
							pretest： 每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。
							once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。
						 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=256m -Dfile.encoding=UTF-8</argLine> 
						<additionalClasspathElements> 
			                <additionalClasspathElement>${basedir}/target/test-classes</additionalClasspathElement>  
			            </additionalClasspathElements>  
			            <includes>  
			                <include>**/*Test.java</include> 
			            </includes> 
                        <excludes>
                            <exclude>**/TestBean.java</exclude>
                        </excludes>
					</configuration>					
				</plugin>
				<!-- jar包生成插件 ：创建项目jar包--> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-jar-plugin</artifactId>  
					<version>3.0.2</version>  
					<configuration> 
						<encoding>${project.build.sourceEncoding}</encoding>
						<skipIfEmpty>true</skipIfEmpty> 
	                    <archive>  
                    	 	<manifest>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							</manifest>
							<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖  -->
							<!-- <manifestEntries>
								<addClasspath>true</addClasspath>  
	                            <classpathPrefix>lib/</classpathPrefix>  
								<Main-Class>.....Main</Main-Class>
								<Premain-Class>.....Main</Premain-Class>
								<Agent-Class>.....Main</Agent-Class>
							</manifestEntries> -->
	                    </archive>  
	                </configuration>  
				</plugin> 
				<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
				<plugin>  					 
					<groupId>org.apache.maven.plugins</groupId>  
					<artifactId>maven-install-plugin</artifactId>  
					<version>2.5.2</version>  
				</plugin> 
				<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-deploy-plugin</artifactId>  
		            <version>2.8.2</version>  
		        </plugin>
				<!-- 源码插件:发布时自动将源码同时发布 -->				
				<plugin>
					 <groupId>org.apache.maven.plugins</groupId>
					 <artifactId>maven-source-plugin</artifactId>
					 <version>3.0.1</version> 
					 <!-- 打包source文件为jar文件 -->
					 <configuration>  
					 	 <testFailureIgnore>true</testFailureIgnore>
					 	 <!-- 打包源码一起发布到maven仓库中 -->
	                     <attach>true</attach>  
	                     <encoding>${project.build.sourceEncoding}</encoding>  
	                 </configuration> 
					 <executions>
						 <execution>
							 <id>attach-sources</id>
							 <phase>package</phase>
							 <goals>
							 	<!-- 
								 	jar-no-fork与jar的区别
									jar，在执行goal之前，执行generate-sources阶段，也就是说，如果，jar绑定的目标在generate-sources之后(比如verify)的话，generate-sources会执行两遍。
									jar-no-fork，没有其余动作，在绑定的phase执行。
								 -->
								<!-- <goal>jar</goal> -->
								<goal>jar-no-fork</goal>
							 </goals>
						 </execution>
					 </executions>
				</plugin>
				<!-- 文档插件:发布时自动生成文档 -->	
				<plugin>  
		            <groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-javadoc-plugin</artifactId>  
		            <version>2.10.4</version> 
					<configuration>  
	                    <aggregate>true</aggregate>  
	                    <argLine>-Dfile.encoding=UTF-8</argLine>
                       	<charset>${project.build.sourceEncoding}</charset> 
                        <encoding>${project.build.sourceEncoding}</encoding> 
                        <docencoding>${project.build.sourceEncoding}</docencoding> 
	                </configuration>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>				
		        </plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 编译插件：编译主代码至主输出目录 -->  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin> 
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-jar-plugin</artifactId>  
			</plugin> 
			<!-- 安装插件：将项目输出构件安装到本地仓库 --> 
			<plugin>  					 
				<groupId>org.apache.maven.plugins</groupId>  
				<artifactId>maven-install-plugin</artifactId>  
			</plugin> 
			<!-- 发布插件 ：将项目输出构件部署到远程仓库--> 
			<plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-deploy-plugin</artifactId>  
	        </plugin>	
			<!-- 源码插件:发布时自动将源码同时发布 -->				
			<plugin>
				 <groupId>org.apache.maven.plugins</groupId>
				 <artifactId>maven-source-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
    <properties>
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 		<commons-lang3.version>3.5</commons-lang3.version>
 		<jedis.version>2.9.0</jedis.version>
 		<junit.version>4.12</junit.version>
 		<servlet-api.version>3.0.1</servlet-api.version>
 		<shiro.version>1.4.0</shiro.version>
 		<slf4j.version>1.7.21</slf4j.version>
 		<spring.version>4.3.11.RELEASE</spring.version><!-- 4.3.x（JDK 1.7 ）、4.1.x（JDK 1.6）、4.0.x（JDK 1.6） -->
	</properties>
	
	<dependencyManagement>
		<dependencies>
			
			<!-- ######################测试工具包###################### -->
			
			<!--junit : Junit测试是程序员测试，即白盒测试 -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			
			<!-- ######################Servlet相关基础包###################### -->
			
			<!-- servlet 基础依赖包 -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api.version}</version>
			</dependency>
			
			<!-- ######################日志组件工具包###################### -->
			
			<!-- SLF4J，即简单日志门面（Simple Logging Facade for Java），不是具体的日志解决方案，它只服务于各种各样
			 的日志系统。按照官方的说法，SLF4J是一个用于日志系统的简单Facade，允许最终用户在部署其应用时使用其所希望的日志系统。 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>
			
			<!-- Redis是一款开源的、高性能的键-值存储（key-value store）。它常被称作是一款数据结构服务器（data structure server）。 -->
			<!-- Jedis 是 Redis 官方首选的 Java 客户端开发包。-->
			<dependency>
			    <groupId>redis.clients</groupId>
			    <artifactId>jedis</artifactId>
			    <version>${jedis.version}</version>
			</dependency>
			
			<!-- ###################### Shiro ###################### -->
			
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-all</artifactId>
				<type>pom</type>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-core</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-web</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-aspectj</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-cas</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-ehcache</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-guice</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-quartz</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-spring</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			 
		</dependencies>
	</dependencyManagement>	
	
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		
		<!-- ###################### Shiro ###################### -->
		
		<!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-all -->
		<dependency>
		    <groupId>org.apache.shiro</groupId>
		    <artifactId>shiro-all</artifactId>
		    <type>pom</type>
		    <exclusions>
		    	<exclusion>
		    		<groupId>org.apache.shiro</groupId>
		    		<artifactId>shiro-guice</artifactId>
		    	</exclusion>
		    	<exclusion>
		    		<groupId>org.apache.shiro</groupId>
		    		<artifactId>shiro-hazelcast</artifactId>
		    	</exclusion>
		    </exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-web</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-cas</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-ehcache</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- <dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-guice</artifactId>
			<scope>provided</scope>
		</dependency> -->
		
		<dependency>
            <groupId>org.apache.oltu.oauth2</groupId>
            <artifactId>org.apache.oltu.oauth2.client</artifactId>
            <version>1.0.2</version>
        </dependency>
        
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-beans</artifactId>
		    <version>4.3.10.RELEASE</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aop</artifactId>
		    <version>4.3.10.RELEASE</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-webmvc</artifactId>
		    <version>4.3.10.RELEASE</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-quartz</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-aspectj</artifactId>
			<scope>provided</scope>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/com.nimbusds/nimbus-jose-jwt -->
		<dependency>
		    <groupId>com.nimbusds</groupId>
		    <artifactId>nimbus-jose-jwt</artifactId>
		    <version>5.1</version>
		</dependency>
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>2.5</version>
		</dependency>
		<!--
			Redis是一款开源的、高性能的键-值存储（key-value store）。它常被称作是一款数据结构服务器（data structure
			server）。
		-->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- <dependency>
		    <groupId>org.crazycake</groupId>
		    <artifactId>shiro-redis</artifactId>
		    <version>2.4.2.1-RELEASE</version>
		</dependency> -->
		<!-- <dependency>
            <groupId>org.springframework.data</groupId>  
            <artifactId>spring-data-redis</artifactId>  
        </dependency>  -->
      
		        
        
        <dependency>
		    <groupId>net.sf.flexjson</groupId>
		    <artifactId>flexjson</artifactId>
		    <version>3.3</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>com.thoughtworks.xstream</groupId>
		    <artifactId>xstream</artifactId>
		    <version>1.4.10</version>
		    <scope>provided</scope>
		</dependency>
		<dependency>
		    <groupId>com.alibaba</groupId>
		    <artifactId>fastjson</artifactId>
		    <version>1.2.32</version>
		    <scope>provided</scope>
		</dependency>

	</dependencies>
	
</project>